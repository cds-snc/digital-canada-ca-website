name: PR Staging Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  FUNCTION_NAME: "pr-review-env"
  GITHUB_SHA: ${{ github.sha }}
  IMAGE: website-staging-container
  REGISTRY: 521732289257.dkr.ecr.ca-central-1.amazonaws.com
  ROLE_ARN: arn:aws:iam::521732289257:role/pr-review-env-lambda
  REGION: ca-central-1
  HUGO_VERSION: 0.136.0

# OIDC permissions block
permissions:
  id-token: write    # Required for OIDC authentication with AWS
  contents: read     # Required for checking out code
  pull-requests: write  # Required for commenting on PRs

jobs:
  create-lambda-functions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [en, fr]
        include:
          - lang: en
            full_name: English
          - lang: fr
            full_name: French
    outputs:
      function_urls: ${{ toJSON(steps.lambda_url.outputs) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::521732289257:role/pr-review-env-manage
          role-session-name: PRReviewEnv
          aws-region: ${{ env.REGION }}

      - name: Create Lambda Function
        id: lambda_url
        run: |
          chmod +x .github/scripts/create-lambda-function.sh
          output=$(.github/scripts/create-lambda-function.sh \
            "${{ env.FUNCTION_NAME }}-${{ matrix.lang }}-pr-${{ github.event.pull_request.number }}" \
            "${{ matrix.lang }}" \
            "${{ env.REGISTRY }}" \
            "${{ env.IMAGE }}" \
            "${{ env.ROLE_ARN }}")
          echo "$output" >> $GITHUB_OUTPUT

  build-and-push-staging-container:
    needs: create-lambda-functions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::521732289257:role/pr-review-env-manage
          role-session-name: PRReviewEnv
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Generate Hugo config
        run: |
          chmod +x .github/scripts/generate-hugo-config.sh
          .github/scripts/generate-hugo-config.sh '${{ needs.create-lambda-functions.outputs.function_urls }}'

      - name: Build Hugo site
        run: hugo --minify --environment staging

      - name: Build and push Docker image
        id: docker_build
        env:
          IMAGE_TAG: pr-${{ github.event.pull_request.number }}-${{ github.sha }}
        run: |
          # Build the image
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:$IMAGE_TAG .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE }}:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          
          # Push both tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:$IMAGE_TAG
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          
          # Set the output with the full image URI
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE }}:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Delete old images
        run: |
          IMAGES_TO_DELETE=$( aws ecr list-images --region ${{ env.REGION }} --repository-name $IMAGE --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
          aws ecr batch-delete-image --region ${{ env.REGION }} --repository-name $IMAGE --image-ids "$IMAGES_TO_DELETE" || true

      - name: Logout of Amazon ECR
        run: docker logout $REGISTRY

  deploy-staging-images:
    needs: [create-lambda-functions, build-and-push-staging-container]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [en, fr]

    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::521732289257:role/pr-review-env-manage
          role-session-name: PRReviewEnv
          aws-region: ${{ env.REGION }}

      - name: Update Lambda Function
        run: |
          FUNCTION_NAME="${{ env.FUNCTION_NAME }}-${{ matrix.lang }}-pr-${{ github.event.pull_request.number }}"
          IMAGE_URI="${{ needs.build-and-push-staging-container.outputs.docker_build_image }}"
          
          echo "Updating function: $FUNCTION_NAME"
          echo "With image: $IMAGE_URI"
          
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri "$IMAGE_URI"

      - name: Comment PR with staging URLs
        if: matrix.lang == 'en'  # Only comment once
        uses: actions/github-script@v7
        with:
          script: |
            const urls = ${{ needs.create-lambda-functions.outputs.function_urls }};
            const comment = `ðŸš€ Staging deployment complete!
            
            Preview your changes at:
            - English: ${urls.en_url}
            - French: ${urls.fr_url}`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Set envs
        run: echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Wait for function to stabilize
        run: sleep 10

      - name: Update container environment
        run: |
          # Start with base JSON structure
          VARS='{"Variables":{"CONTENT_DIR":"/var/www/html/${{ matrix.lang }}"'
          
          # Add URLs if they exist
          if [ -n "$FUNCTION_URL_EN" ]; then
            VARS="$VARS,\"FUNCTION_URL_EN\":\"$FUNCTION_URL_EN\""
          fi
          if [ -n "$FUNCTION_URL_FR" ]; then
            VARS="$VARS,\"FUNCTION_URL_FR\":\"$FUNCTION_URL_FR\""
          fi
          
          # Close the JSON structure
          VARS="$VARS}}"

          # Try updating the configuration with retries
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME-$PR_NUMBER-${{ matrix.lang }} \
              --environment "$VARS"; then
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "Failed to update function configuration after $max_attempts attempts"
                exit 1
              fi
              echo "Attempt $attempt failed, waiting before retry..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done